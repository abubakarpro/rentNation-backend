// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Location {
  placeId String?
  name    String?
  city    String?
}

enum Role {
  USER
  ADMIN
  SUB_ADMIN
}

enum Categories {
  VEHICLES
  BEACHES
  KAYAKS
  GOLF_CARTS
  OTHERS
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  name         String?
  address      String?
  country      String?
  city         String?
  state        String?
  password     String
  role         Role
  likes        Like[]
  review       Review[]
  googleUser   Boolean  @default(false)
  facebookUser Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      Categories
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  location        Location
  images          String[]
  categoryId      String   @db.ObjectId
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quantity        Int
  pricePerDay     Float
  discountPerWeek Float
  properties      Json
  availableFrom   String
  availableTo     String
  viewCounter     Int?     @default(0)
  likes           Like[]
  review          Review[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  stars          Int
  reviewComments String
  userId         String   @db.ObjectId
  productId      String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

