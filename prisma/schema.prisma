// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["darwin-arm64", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Location {
  placeId String?
  name    String?
  city    String?
}

enum Role {
  USER
  ADMIN
  SUB_ADMIN
}

enum Categories {
  VEHICLES
  BEACHES
  KAYAKS
  GOLF_CARTS
  OTHERS
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  name         String?
  address      String?
  country      String?
  city         String?
  state        String?
  password     String
  role         Role
  likes        Like[]
  review       Review[]
  damageReport DamageReport[]
  googleUser   Boolean        @default(false)
  facebookUser Boolean        @default(false)
  appleUser    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ticket       Ticket[]
  orders        Order[]
  profile      Profile?
  Notification Notification[]
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      Categories
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  location        Location
  images          String[]
  categoryId      String         @db.ObjectId
  category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quantity        Int
  pricePerDay     Float
  discountPerWeek Float
  properties      Json
  damageReport    DamageReport[]
  viewCounter     Int?           @default(0)
  likes           Like[]
  review          Review[]
  OrderProduct     OrderProduct[]
  availability    String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  stars          Int
  reviewComments String
  userId         String   @db.ObjectId
  productId      String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model DamageReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  userId      String   @db.ObjectId
  productId   String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  department  String
  subject     String?
  description String?
}

model Order {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @db.ObjectId
  subTotal    Float
  totalPrice  Float
  productData Json
  status      String
  OrderProduct OrderProduct[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model OrderProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  orderId    String  @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Profile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  bio           String?
  avatar        String?
  serviceUpdate Boolean? @default(false)
  sound         Boolean? @default(false)
  notification  Boolean? @default(false)
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notification {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @db.ObjectId
  message String 
}
